{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Rock, Paper, Scissors Game Documentation","text":""},{"location":"#overview","title":"Overview","text":"<p>This project implements a Rock, Paper, Scissors game with extended rules. The game can be played between two human players, two computer players, or one human and one computer player.</p>"},{"location":"#game-rules","title":"Game Rules","text":""},{"location":"#basic-rules","title":"Basic Rules","text":"<ul> <li>Rock crushes Scissors</li> <li>Scissors cuts Paper</li> <li>Paper covers Rock</li> </ul>"},{"location":"#extended-rules","title":"Extended Rules","text":"<ul> <li>Lizard poisons Spock and eats Paper</li> <li>Spock smashes Scissors and vaporizes Rock</li> <li>Rock crushes Scissors and Lizard</li> <li>Scissors cuts Paper and decapitates Lizard</li> <li>Paper covers Rock and disproves Spock</li> </ul>"},{"location":"api/","title":"API Documentation","text":""},{"location":"api/#rps_games.game","title":"<code>rps_games.game</code>","text":"<p>Rock, Paper, Scissors game with extended rules.</p>"},{"location":"api/#rps_games.game.ComputerPlayer","title":"<code>ComputerPlayer</code>","text":"<p>               Bases: <code>Player</code></p> <p>Computer Player class.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the player.</p> <code>score</code> <code>int</code> <p>Score of the player.</p> <p>Methods:</p> Name Description <code>choice</code> <p>Gets the computer player's choice randomly.</p> <code>__str__</code> <p>String representation of the player.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>class ComputerPlayer(Player):\n    \"\"\"Computer Player class.\n\n    Attributes:\n        name (str): Name of the player.\n        score (int): Score of the player.\n\n    Methods:\n        choice: Gets the computer player's choice randomly.\n        __str__: String representation of the player.\n    \"\"\"\n\n    def choice(self, choices: list[str]) -&gt; str:\n        \"\"\"Gets the computer player's choice randomly.\n\n        Args:\n            choices (list[str]): List of possible choices.\n\n        Returns:\n            str: Chosen option.\n        \"\"\"\n        return random.choice(choices)\n</code></pre>"},{"location":"api/#rps_games.game.ComputerPlayer.choice","title":"<code>choice(choices)</code>","text":"<p>Gets the computer player's choice randomly.</p> <p>Parameters:</p> Name Type Description Default <code>choices</code> <code>list[str]</code> <p>List of possible choices.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Chosen option.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>def choice(self, choices: list[str]) -&gt; str:\n    \"\"\"Gets the computer player's choice randomly.\n\n    Args:\n        choices (list[str]): List of possible choices.\n\n    Returns:\n        str: Chosen option.\n    \"\"\"\n    return random.choice(choices)\n</code></pre>"},{"location":"api/#rps_games.game.Game","title":"<code>Game</code>","text":"<p>Game class to play the game.</p> <p>Attributes:</p> Name Type Description <code>player_a</code> <code>Player</code> <p>First player.</p> <code>player_b</code> <code>Player</code> <p>Second player.</p> <code>rule_set</code> <code>RuleSet</code> <p>RuleSet object containing the game rules.</p> <code>Methods</code> <code>RuleSet</code> <p>round_eval: Evaluates the round and updates the score. play_best_of: Plays a game with the best of a specified number of rounds. play_first_to: Plays a game where the first player to reach a specified score wins. play_round: Plays a single round of the game.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>class Game:\n    \"\"\"Game class to play the game.\n\n    Attributes:\n        player_a (Player): First player.\n        player_b (Player): Second player.\n        rule_set (RuleSet): RuleSet object containing the game rules.\n\n        Methods:\n            round_eval: Evaluates the round and updates the score.\n            play_best_of: Plays a game with the best of a specified number of rounds.\n            play_first_to: Plays a game where the first player to reach a specified score wins.\n            play_round: Plays a single round of the game.\n    \"\"\"\n\n    def __init__(self, player_a: Player, player_b: Player, rule_set: RuleSet):\n        self.player_a = player_a\n        self.player_b = player_b\n        self.rule_set = rule_set\n\n    def round_eval(self, winner: Optional[Player]):\n        \"\"\"Evaluates the round and updates the score.\n\n        Args:\n            winner (Optional[Player]): The player who won the round, or None if it's a draw.\n        \"\"\"\n        if winner is None:\n            print(\"Draw\")\n        else:\n            winner.score += 1\n            print(f\"{winner} wins this round\")\n\n        print(\n            f\"Score: {self.player_a} {self.player_a.score} - {self.player_b} {self.player_b.score}\"\n        )\n\n    def get_winner(self) -&gt; Player:\n        \"\"\"Gets the winner of the game.\n\n        Returns:\n            Player: The player with the highest score.\n        \"\"\"\n        return (\n            self.player_a\n            if self.player_a.score &gt; self.player_b.score\n            else self.player_b\n        )\n\n    def play_best_of(self, rounds: int = 3) -&gt; Optional[Player]:\n        \"\"\"Plays a game with the best of a specified number of rounds.\n\n        Args:\n            rounds (int): Number of rounds to play.\n\n        Returns:\n            Optional[Player]: The player who wins the most rounds, or None if it's a draw.\n        \"\"\"\n        print(f\"\\nBest of {rounds} rounds\")\n        for round_num in range(rounds):\n            print(\"\\n---------\")\n            print(f\"Round {round_num+1}\")\n            print(\"---------\")\n            self.play_round()\n\n        if self.player_a.score == self.player_b.score:\n            return None\n\n        return self.get_winner()\n\n    def play_first_to(self, score: int = 3) -&gt; Player:\n        \"\"\"Plays a game where the first player to reach a specified score wins.\n\n        Args:\n            score (int): Score to reach to win the game.\n\n        Returns:\n            Player: The player who reaches the score first.\n        \"\"\"\n        print(f\"\\nFirst to {score} wins\")\n        round_num = 0\n        while self.player_a.score &lt; score and self.player_b.score &lt; score:\n            print(\"\\n--------\")\n            print(f\"Round {round_num+1}\")\n            print(\"--------\")\n            self.play_round()\n            round_num += 1\n\n        return self.get_winner()\n\n    def play_round(self):\n        \"\"\"Plays a single round of the game.\"\"\"\n        choices = self.rule_set.get_choices()\n        choice_a = self.player_a.choice(choices=choices)\n        choice_b = self.player_b.choice(choices=choices)\n\n        print(f\"{self.player_a} chooses {choice_a}\")\n        print(f\"{self.player_b} chooses {choice_b}\")\n\n        result = self.rule_set.determine_winner(choice_a, choice_b)\n\n        if result is None:\n            print(\"Draw\")\n            return\n\n        winning_choice, reason = result\n        winner = self.player_a if winning_choice == choice_a else self.player_b\n\n        print(\n            f\"{winning_choice} {reason} {choice_b if winning_choice == choice_a else choice_a}\"\n        )\n        self.round_eval(winner)\n\n        return\n</code></pre>"},{"location":"api/#rps_games.game.Game.get_winner","title":"<code>get_winner()</code>","text":"<p>Gets the winner of the game.</p> <p>Returns:</p> Name Type Description <code>Player</code> <code>Player</code> <p>The player with the highest score.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>def get_winner(self) -&gt; Player:\n    \"\"\"Gets the winner of the game.\n\n    Returns:\n        Player: The player with the highest score.\n    \"\"\"\n    return (\n        self.player_a\n        if self.player_a.score &gt; self.player_b.score\n        else self.player_b\n    )\n</code></pre>"},{"location":"api/#rps_games.game.Game.play_best_of","title":"<code>play_best_of(rounds=3)</code>","text":"<p>Plays a game with the best of a specified number of rounds.</p> <p>Parameters:</p> Name Type Description Default <code>rounds</code> <code>int</code> <p>Number of rounds to play.</p> <code>3</code> <p>Returns:</p> Type Description <code>Optional[Player]</code> <p>Optional[Player]: The player who wins the most rounds, or None if it's a draw.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>def play_best_of(self, rounds: int = 3) -&gt; Optional[Player]:\n    \"\"\"Plays a game with the best of a specified number of rounds.\n\n    Args:\n        rounds (int): Number of rounds to play.\n\n    Returns:\n        Optional[Player]: The player who wins the most rounds, or None if it's a draw.\n    \"\"\"\n    print(f\"\\nBest of {rounds} rounds\")\n    for round_num in range(rounds):\n        print(\"\\n---------\")\n        print(f\"Round {round_num+1}\")\n        print(\"---------\")\n        self.play_round()\n\n    if self.player_a.score == self.player_b.score:\n        return None\n\n    return self.get_winner()\n</code></pre>"},{"location":"api/#rps_games.game.Game.play_first_to","title":"<code>play_first_to(score=3)</code>","text":"<p>Plays a game where the first player to reach a specified score wins.</p> <p>Parameters:</p> Name Type Description Default <code>score</code> <code>int</code> <p>Score to reach to win the game.</p> <code>3</code> <p>Returns:</p> Name Type Description <code>Player</code> <code>Player</code> <p>The player who reaches the score first.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>def play_first_to(self, score: int = 3) -&gt; Player:\n    \"\"\"Plays a game where the first player to reach a specified score wins.\n\n    Args:\n        score (int): Score to reach to win the game.\n\n    Returns:\n        Player: The player who reaches the score first.\n    \"\"\"\n    print(f\"\\nFirst to {score} wins\")\n    round_num = 0\n    while self.player_a.score &lt; score and self.player_b.score &lt; score:\n        print(\"\\n--------\")\n        print(f\"Round {round_num+1}\")\n        print(\"--------\")\n        self.play_round()\n        round_num += 1\n\n    return self.get_winner()\n</code></pre>"},{"location":"api/#rps_games.game.Game.play_round","title":"<code>play_round()</code>","text":"<p>Plays a single round of the game.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>def play_round(self):\n    \"\"\"Plays a single round of the game.\"\"\"\n    choices = self.rule_set.get_choices()\n    choice_a = self.player_a.choice(choices=choices)\n    choice_b = self.player_b.choice(choices=choices)\n\n    print(f\"{self.player_a} chooses {choice_a}\")\n    print(f\"{self.player_b} chooses {choice_b}\")\n\n    result = self.rule_set.determine_winner(choice_a, choice_b)\n\n    if result is None:\n        print(\"Draw\")\n        return\n\n    winning_choice, reason = result\n    winner = self.player_a if winning_choice == choice_a else self.player_b\n\n    print(\n        f\"{winning_choice} {reason} {choice_b if winning_choice == choice_a else choice_a}\"\n    )\n    self.round_eval(winner)\n\n    return\n</code></pre>"},{"location":"api/#rps_games.game.Game.round_eval","title":"<code>round_eval(winner)</code>","text":"<p>Evaluates the round and updates the score.</p> <p>Parameters:</p> Name Type Description Default <code>winner</code> <code>Optional[Player]</code> <p>The player who won the round, or None if it's a draw.</p> required Source code in <code>src\\rps_games\\game.py</code> <pre><code>def round_eval(self, winner: Optional[Player]):\n    \"\"\"Evaluates the round and updates the score.\n\n    Args:\n        winner (Optional[Player]): The player who won the round, or None if it's a draw.\n    \"\"\"\n    if winner is None:\n        print(\"Draw\")\n    else:\n        winner.score += 1\n        print(f\"{winner} wins this round\")\n\n    print(\n        f\"Score: {self.player_a} {self.player_a.score} - {self.player_b} {self.player_b.score}\"\n    )\n</code></pre>"},{"location":"api/#rps_games.game.HumanPlayer","title":"<code>HumanPlayer</code>","text":"<p>               Bases: <code>Player</code></p> <p>Human Player class.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the player.</p> <code>score</code> <code>int</code> <p>Score of the player.</p> <p>Methods:</p> Name Description <code>choice</code> <p>Gets the human player's choice using a secure input method.</p> <code>__str__</code> <p>String representation of the player.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>class HumanPlayer(Player):\n    \"\"\"Human Player class.\n\n    Attributes:\n        name (str): Name of the player.\n        score (int): Score of the player.\n\n    Methods:\n        choice: Gets the human player's choice using a secure\n            input method.\n        __str__: String representation of the player.\n    \"\"\"\n\n    def choice(self, choices: list[str]) -&gt; str:\n        \"\"\"Gets the human player's choice using a secure input method. This avoids\n        that if two humans are playing, they know what the other player has chosen.\n\n        Args:\n            choices (list[str]): List of possible choices.\n\n        Returns:\n            str: Chosen option.\n        \"\"\"\n        while True:\n            choice = getpass.getpass(\n                f\"{self.name}, enter your choice {choices} \" f\"(or 'q' to quit): \"\n            )\n            if choice.upper() == \"Q\":\n                sys.exit()\n            if choice in choices:\n                return choice\n            print(f\"Invalid choice. Please choose from {choices}.\")\n</code></pre>"},{"location":"api/#rps_games.game.HumanPlayer.choice","title":"<code>choice(choices)</code>","text":"<p>Gets the human player's choice using a secure input method. This avoids that if two humans are playing, they know what the other player has chosen.</p> <p>Parameters:</p> Name Type Description Default <code>choices</code> <code>list[str]</code> <p>List of possible choices.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Chosen option.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>def choice(self, choices: list[str]) -&gt; str:\n    \"\"\"Gets the human player's choice using a secure input method. This avoids\n    that if two humans are playing, they know what the other player has chosen.\n\n    Args:\n        choices (list[str]): List of possible choices.\n\n    Returns:\n        str: Chosen option.\n    \"\"\"\n    while True:\n        choice = getpass.getpass(\n            f\"{self.name}, enter your choice {choices} \" f\"(or 'q' to quit): \"\n        )\n        if choice.upper() == \"Q\":\n            sys.exit()\n        if choice in choices:\n            return choice\n        print(f\"Invalid choice. Please choose from {choices}.\")\n</code></pre>"},{"location":"api/#rps_games.game.Player","title":"<code>Player</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract Player class.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the player.</p> <code>score</code> <code>int</code> <p>Score of the player.</p> <p>Methods:</p> Name Description <code>choice</code> <p>Abstract method to get the player's choice.</p> <code>__str__</code> <p>String representation of the player.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>class Player(ABC):\n    \"\"\"Abstract Player class.\n\n    Attributes:\n        name (str): Name of the player.\n        score (int): Score of the player.\n\n    Methods:\n        choice: Abstract method to get the player's choice.\n        __str__: String representation of the player.\n    \"\"\"\n\n    def __init__(self, name: str):\n        self.name = name\n        self.score = 0\n\n    @abstractmethod\n    def choice(self, choices: list[str]) -&gt; str:\n        \"\"\"Abstract method to get the player's choice.\n\n        Args:\n            choices (list[str]): List of possible choices.\n\n        Returns:\n            str: Chosen option.\n        \"\"\"\n\n    def __str__(self) -&gt; str:\n        \"\"\"String representation of the player.\n\n        Returns:\n            str: Name of the player.\n        \"\"\"\n        return self.name\n</code></pre>"},{"location":"api/#rps_games.game.Player.__str__","title":"<code>__str__()</code>","text":"<p>String representation of the player.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Name of the player.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"String representation of the player.\n\n    Returns:\n        str: Name of the player.\n    \"\"\"\n    return self.name\n</code></pre>"},{"location":"api/#rps_games.game.Player.choice","title":"<code>choice(choices)</code>  <code>abstractmethod</code>","text":"<p>Abstract method to get the player's choice.</p> <p>Parameters:</p> Name Type Description Default <code>choices</code> <code>list[str]</code> <p>List of possible choices.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Chosen option.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>@abstractmethod\ndef choice(self, choices: list[str]) -&gt; str:\n    \"\"\"Abstract method to get the player's choice.\n\n    Args:\n        choices (list[str]): List of possible choices.\n\n    Returns:\n        str: Chosen option.\n    \"\"\"\n</code></pre>"},{"location":"api/#rps_games.game.RuleSet","title":"<code>RuleSet</code>","text":"<p>RuleSet class to store the rules of the game.</p> <p>Attributes:</p> Name Type Description <code>rules</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary where keys are choices and values are dictionaries of choices they can defeat with reasons.</p> <p>Example:     {         \"Rock\": {\"Scissors\": \"crushes\"},         \"Scissors\": {\"Paper\": \"cuts\"},         \"Paper\": {\"Rock\": \"covers\"},     }</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>class RuleSet:\n    \"\"\"RuleSet class to store the rules of the game.\n\n    Attributes:\n        rules (dict[str, dict[str, str]]): Dictionary where keys are choices and values are\n            dictionaries of choices they can defeat with reasons.\n\n            Example:\n                {\n                    \"Rock\": {\"Scissors\": \"crushes\"},\n                    \"Scissors\": {\"Paper\": \"cuts\"},\n                    \"Paper\": {\"Rock\": \"covers\"},\n                }\n    \"\"\"\n\n    def __init__(self, rules: dict[str, dict[str, str]]):\n        self.rules = rules\n\n    def get_choices(self) -&gt; list[str]:\n        \"\"\"Gets the list of possible choices.\n\n        Returns:\n            list[str]: List of choices.\n        \"\"\"\n        return list(self.rules.keys())\n\n    def determine_winner(\n        self, choice_a: str, choice_b: str\n    ) -&gt; Optional[tuple[str, str]]:\n        \"\"\"Determines the winner between two choices.\n\n        Args:\n            choice_a (str): First choice.\n            choice_b (str): Second choice.\n\n        Returns:\n            Optional[tuple[str, str]]: Tuple containing the winning choice and the reason,\n                or None if it's a draw.\n\n        Example:\n            &gt;&gt;&gt; rules = RuleSet(BASIC_RULES)\n            &gt;&gt;&gt; rules.determine_winner(\"Rock\", \"Scissors\")\n                (\"Rock\", \"crushes\")\n            &gt;&gt;&gt; rules.determine_winner(\"Scissors\", \"Paper\")\n                (\"Scissors\", \"cuts\")\n        \"\"\"\n        if choice_a == choice_b:\n            return None\n        if choice_a in self.rules[choice_b]:\n            return choice_b, self.rules[choice_b][choice_a]\n        return choice_a, self.rules[choice_a][choice_b]\n</code></pre>"},{"location":"api/#rps_games.game.RuleSet.determine_winner","title":"<code>determine_winner(choice_a, choice_b)</code>","text":"<p>Determines the winner between two choices.</p> <p>Parameters:</p> Name Type Description Default <code>choice_a</code> <code>str</code> <p>First choice.</p> required <code>choice_b</code> <code>str</code> <p>Second choice.</p> required <p>Returns:</p> Type Description <code>Optional[tuple[str, str]]</code> <p>Optional[tuple[str, str]]: Tuple containing the winning choice and the reason, or None if it's a draw.</p> Example <p>rules = RuleSet(BASIC_RULES) rules.determine_winner(\"Rock\", \"Scissors\")     (\"Rock\", \"crushes\") rules.determine_winner(\"Scissors\", \"Paper\")     (\"Scissors\", \"cuts\")</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>def determine_winner(\n    self, choice_a: str, choice_b: str\n) -&gt; Optional[tuple[str, str]]:\n    \"\"\"Determines the winner between two choices.\n\n    Args:\n        choice_a (str): First choice.\n        choice_b (str): Second choice.\n\n    Returns:\n        Optional[tuple[str, str]]: Tuple containing the winning choice and the reason,\n            or None if it's a draw.\n\n    Example:\n        &gt;&gt;&gt; rules = RuleSet(BASIC_RULES)\n        &gt;&gt;&gt; rules.determine_winner(\"Rock\", \"Scissors\")\n            (\"Rock\", \"crushes\")\n        &gt;&gt;&gt; rules.determine_winner(\"Scissors\", \"Paper\")\n            (\"Scissors\", \"cuts\")\n    \"\"\"\n    if choice_a == choice_b:\n        return None\n    if choice_a in self.rules[choice_b]:\n        return choice_b, self.rules[choice_b][choice_a]\n    return choice_a, self.rules[choice_a][choice_b]\n</code></pre>"},{"location":"api/#rps_games.game.RuleSet.get_choices","title":"<code>get_choices()</code>","text":"<p>Gets the list of possible choices.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of choices.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>def get_choices(self) -&gt; list[str]:\n    \"\"\"Gets the list of possible choices.\n\n    Returns:\n        list[str]: List of choices.\n    \"\"\"\n    return list(self.rules.keys())\n</code></pre>"}]}