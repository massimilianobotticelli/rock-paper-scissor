{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Rock, Paper, Scissors Game Documentation","text":""},{"location":"#overview","title":"Overview","text":"<p>This project implements a Rock, Paper, Scissors game with extended rules. The game can be played between two human players, two computer players, or one human and one computer player. Additionally, it supports a player powered by a large language model (LLM).</p>"},{"location":"#game-rules","title":"Game Rules","text":""},{"location":"#basic-rules","title":"Basic Rules","text":"<ul> <li>Rock crushes Scissors</li> <li>Scissors cuts Paper</li> <li>Paper covers Rock</li> </ul>"},{"location":"#spock-lizard-rules","title":"Spock-Lizard Rules","text":"<ul> <li>Lizard poisons Spock and eats Paper</li> <li>Spock smashes Scissors and vaporizes Rock</li> <li>Rock crushes Scissors and Lizard</li> <li>Scissors cuts Paper and decapitates Lizard</li> <li>Paper covers Rock and disproves Spock</li> </ul>"},{"location":"#how-to-start","title":"How to Start","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.x</li> <li>Required Python packages (can be installed via <code>requirements.txt</code>)</li> </ul>"},{"location":"#setup","title":"Setup","text":"<ol> <li>Clone the repository to your local machine.</li> <li>Navigate to the project directory.</li> <li>Set up the environment variables by creating a <code>.env</code> file in the project directory.</li> <li>Install the required Python packages:    <code>sh    pip install poetry    poetry install</code></li> </ol>"},{"location":"#configuration","title":"Configuration","text":"<p>The game configuration and rules are defined in YAML files located in the <code>configs</code> directory.</p>"},{"location":"#game-configuration","title":"Game Configuration","text":"<p>The game configuration is located in <code>configs/game_config.yaml</code>. This file contains the configuration for the game, including the ruleset, game mode, target score, and player details.</p> <pre><code>game:\n  rules: \"SPOCK_LIZARD\"    # Options: \"BASIC_RULES\", \"SPOCK_LIZARD\"\n  mode: \"best_of\"          # Options: \"first_to\", \"best_of\"\n  target_score: 10         # Used if mode is \"first_to\"\n  rounds: 10               # Used if mode is \"best_of\"\n\nplayers:\n  player_one:\n    type: \"LLMPlayer\"      # Options: \"HumanPlayer\", \"ComputerPlayer\", \"LLMPlayer\"\n    name: \"Gemini\"\n  player_two:\n    type: \"ComputerPlayer\" # Options: \"HumanPlayer\", \"ComputerPlayer\"\n    name: \"Computer A\"\n</code></pre>"},{"location":"#rules-configuration","title":"Rules Configuration","text":"<p>The tules configuration is located in <code>configs/rules.yaml</code>. This file contains the rules for the game. You can define multiple rulesets and choose one in the game configuration.</p> <pre><code>BASIC_RULES:\n  Rock:\n    Scissors: \"crushes\"\n  Paper:\n    Rock: \"covers\"\n  Scissors:\n    Paper: \"cuts\"\n\nSPOCK_LIZARD:\n  Rock:\n    Scissors: \"crushes\"\n    Lizard: \"crushes\"\n  Paper:\n    Rock: \"covers\"\n    Spock: \"disproves\"\n  Scissors:\n    Paper: \"cuts\"\n    Lizard: \"decapitates\"\n  Lizard:\n    Spock: \"poisons\"\n    Paper: \"eats\"\n  Spock:\n    Scissors: \"smashes\"\n    Rock: \"vaporizes\"\n</code></pre>"},{"location":"#running-the-game","title":"Running the Game","text":"<p>To start the game, run the <code>game.py</code> script:</p> <pre><code>python src/rps_games/game.py\n</code></pre> <p>The game will use the configuration specified in the <code>game_config.yaml</code> file and the rules defined in the <code>rules.yaml</code> file.</p>"},{"location":"api/","title":"API Documentation","text":""},{"location":"api/#rps_games.game","title":"<code>rps_games.game</code>","text":"<p>Rock, Paper, Scissors game with extended rules.</p>"},{"location":"api/#rps_games.game.Game","title":"<code>Game</code>","text":"<p>Game class to play the game.</p> <p>Attributes:</p> Name Type Description <code>player_a</code> <code>Player</code> <p>First player.</p> <code>player_b</code> <code>Player</code> <p>Second player.</p> <code>rule_set</code> <code>RuleSet</code> <p>RuleSet object containing the game rules.</p> <code>history</code> <code>list[str]</code> <p>List to store the history of the game.</p> <p>Methods:</p> Name Description <code>log_and_print</code> <p>Logs and prints a message.</p> <code>play_best_of</code> <p>Plays a game with the best of a specified number of rounds.</p> <code>play_first_to</code> <p>Plays a game where the first player to reach a specified score wins.</p> <code>_play_round</code> <p>Plays a single round of the game.</p> <code>_get_winner</code> <p>Gets the winner of the game.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>class Game:\n    \"\"\"Game class to play the game.\n\n    Attributes:\n        player_a (Player): First player.\n        player_b (Player): Second player.\n        rule_set (RuleSet): RuleSet object containing the game rules.\n        history (list[str]): List to store the history of the game.\n\n    Methods:\n        log_and_print: Logs and prints a message.\n        play_best_of: Plays a game with the best of a specified number of rounds.\n        play_first_to: Plays a game where the first player to reach a specified score wins.\n        _play_round: Plays a single round of the game.\n        _get_winner: Gets the winner of the game.\n    \"\"\"\n\n    def __init__(self, player_a: Player, player_b: Player, rule_set: RuleSet):\n        \"\"\"Initializes the Game with the given players and rules.\n\n        Args:\n            player_a (Player): First player.\n            player_b (Player): Second player.\n            rule_set (RuleSet): RuleSet object containing the game rules.\n        \"\"\"\n        self.player_a = player_a\n        self.player_b = player_b\n        self.rule_set = rule_set\n        self.history = []\n\n    def log_and_print(self, message: str):\n        \"\"\"Logs and prints a message.\n\n        Args:\n            message (str): Message to log and print.\n        \"\"\"\n        self.history.append(message)\n        logging.info(message)\n        print(message)\n\n    def play_best_of(self, rounds: int = 3) -&gt; Optional[Player]:\n        \"\"\"Plays a game with the best of a specified number of rounds.\n\n        Args:\n            rounds (int): Number of rounds to play.\n\n        Returns:\n            Optional[Player]: The player who wins the most rounds, or None if it's a draw.\n        \"\"\"\n        self.log_and_print(f\"\\nBest of {rounds} rounds\")\n        for round_num in range(rounds):\n            self.log_and_print(f\"\\n---------\\nRound {round_num+1}\\n---------\")\n            self._play_round()\n\n        if self.player_a.score == self.player_b.score:\n            return None\n\n        return self._get_winner()\n\n    def play_first_to(self, score: int = 3) -&gt; Player:\n        \"\"\"Plays a game where the first player to reach a specified score wins.\n\n        Args:\n            score (int): Score to reach to win the game.\n\n        Returns:\n            Player: The player who reaches the score first.\n        \"\"\"\n        self.log_and_print(f\"\\nFirst to {score} wins\")\n        round_num = 0\n        while self.player_a.score &lt; score and self.player_b.score &lt; score:\n            self.log_and_print(f\"\\n--------\\nRound {round_num+1}\\n--------\")\n            self._play_round()\n            round_num += 1\n\n        return self._get_winner()\n\n    def _play_round(self):\n        \"\"\"Plays a single round of the game.\"\"\"\n        choices = self.rule_set.get_choices()\n        choice_a = self.player_a.choice(choices=choices, history=self.history)\n        choice_b = self.player_b.choice(choices=choices, history=self.history)\n\n        self.log_and_print(f\"{self.player_a} chooses {choice_a}\")\n        self.log_and_print(f\"{self.player_b} chooses {choice_b}\")\n\n        result = self.rule_set.determine_winner(choice_a, choice_b)\n\n        if result is None:\n            self.log_and_print(\"Draw\")\n            return\n\n        winning_choice, reason = result\n\n        winner = self.player_a if winning_choice == choice_a else self.player_b\n        winner.score += 1\n\n        self.log_and_print(\n            f\"{winning_choice} {reason} {choice_b if winning_choice == choice_a else choice_a}\"\n        )\n\n        self.log_and_print(f\"{winner} wins this round\")\n\n        self.log_and_print(\n            f\"Score: {self.player_a} {self.player_a.score} - {self.player_b} {self.player_b.score}\"\n        )\n\n        return\n\n    def _get_winner(self) -&gt; Player:\n        \"\"\"Gets the winner of the game.\n\n        Returns:\n            Player: The player with the highest score.\n        \"\"\"\n        return (\n            self.player_a\n            if self.player_a.score &gt; self.player_b.score\n            else self.player_b\n        )\n</code></pre>"},{"location":"api/#rps_games.game.Game.__init__","title":"<code>__init__(player_a, player_b, rule_set)</code>","text":"<p>Initializes the Game with the given players and rules.</p> <p>Parameters:</p> Name Type Description Default <code>player_a</code> <code>Player</code> <p>First player.</p> required <code>player_b</code> <code>Player</code> <p>Second player.</p> required <code>rule_set</code> <code>RuleSet</code> <p>RuleSet object containing the game rules.</p> required Source code in <code>src\\rps_games\\game.py</code> <pre><code>def __init__(self, player_a: Player, player_b: Player, rule_set: RuleSet):\n    \"\"\"Initializes the Game with the given players and rules.\n\n    Args:\n        player_a (Player): First player.\n        player_b (Player): Second player.\n        rule_set (RuleSet): RuleSet object containing the game rules.\n    \"\"\"\n    self.player_a = player_a\n    self.player_b = player_b\n    self.rule_set = rule_set\n    self.history = []\n</code></pre>"},{"location":"api/#rps_games.game.Game._get_winner","title":"<code>_get_winner()</code>","text":"<p>Gets the winner of the game.</p> <p>Returns:</p> Name Type Description <code>Player</code> <code>Player</code> <p>The player with the highest score.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>def _get_winner(self) -&gt; Player:\n    \"\"\"Gets the winner of the game.\n\n    Returns:\n        Player: The player with the highest score.\n    \"\"\"\n    return (\n        self.player_a\n        if self.player_a.score &gt; self.player_b.score\n        else self.player_b\n    )\n</code></pre>"},{"location":"api/#rps_games.game.Game._play_round","title":"<code>_play_round()</code>","text":"<p>Plays a single round of the game.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>def _play_round(self):\n    \"\"\"Plays a single round of the game.\"\"\"\n    choices = self.rule_set.get_choices()\n    choice_a = self.player_a.choice(choices=choices, history=self.history)\n    choice_b = self.player_b.choice(choices=choices, history=self.history)\n\n    self.log_and_print(f\"{self.player_a} chooses {choice_a}\")\n    self.log_and_print(f\"{self.player_b} chooses {choice_b}\")\n\n    result = self.rule_set.determine_winner(choice_a, choice_b)\n\n    if result is None:\n        self.log_and_print(\"Draw\")\n        return\n\n    winning_choice, reason = result\n\n    winner = self.player_a if winning_choice == choice_a else self.player_b\n    winner.score += 1\n\n    self.log_and_print(\n        f\"{winning_choice} {reason} {choice_b if winning_choice == choice_a else choice_a}\"\n    )\n\n    self.log_and_print(f\"{winner} wins this round\")\n\n    self.log_and_print(\n        f\"Score: {self.player_a} {self.player_a.score} - {self.player_b} {self.player_b.score}\"\n    )\n\n    return\n</code></pre>"},{"location":"api/#rps_games.game.Game.log_and_print","title":"<code>log_and_print(message)</code>","text":"<p>Logs and prints a message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Message to log and print.</p> required Source code in <code>src\\rps_games\\game.py</code> <pre><code>def log_and_print(self, message: str):\n    \"\"\"Logs and prints a message.\n\n    Args:\n        message (str): Message to log and print.\n    \"\"\"\n    self.history.append(message)\n    logging.info(message)\n    print(message)\n</code></pre>"},{"location":"api/#rps_games.game.Game.play_best_of","title":"<code>play_best_of(rounds=3)</code>","text":"<p>Plays a game with the best of a specified number of rounds.</p> <p>Parameters:</p> Name Type Description Default <code>rounds</code> <code>int</code> <p>Number of rounds to play.</p> <code>3</code> <p>Returns:</p> Type Description <code>Optional[Player]</code> <p>Optional[Player]: The player who wins the most rounds, or None if it's a draw.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>def play_best_of(self, rounds: int = 3) -&gt; Optional[Player]:\n    \"\"\"Plays a game with the best of a specified number of rounds.\n\n    Args:\n        rounds (int): Number of rounds to play.\n\n    Returns:\n        Optional[Player]: The player who wins the most rounds, or None if it's a draw.\n    \"\"\"\n    self.log_and_print(f\"\\nBest of {rounds} rounds\")\n    for round_num in range(rounds):\n        self.log_and_print(f\"\\n---------\\nRound {round_num+1}\\n---------\")\n        self._play_round()\n\n    if self.player_a.score == self.player_b.score:\n        return None\n\n    return self._get_winner()\n</code></pre>"},{"location":"api/#rps_games.game.Game.play_first_to","title":"<code>play_first_to(score=3)</code>","text":"<p>Plays a game where the first player to reach a specified score wins.</p> <p>Parameters:</p> Name Type Description Default <code>score</code> <code>int</code> <p>Score to reach to win the game.</p> <code>3</code> <p>Returns:</p> Name Type Description <code>Player</code> <code>Player</code> <p>The player who reaches the score first.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>def play_first_to(self, score: int = 3) -&gt; Player:\n    \"\"\"Plays a game where the first player to reach a specified score wins.\n\n    Args:\n        score (int): Score to reach to win the game.\n\n    Returns:\n        Player: The player who reaches the score first.\n    \"\"\"\n    self.log_and_print(f\"\\nFirst to {score} wins\")\n    round_num = 0\n    while self.player_a.score &lt; score and self.player_b.score &lt; score:\n        self.log_and_print(f\"\\n--------\\nRound {round_num+1}\\n--------\")\n        self._play_round()\n        round_num += 1\n\n    return self._get_winner()\n</code></pre>"},{"location":"api/#rps_games.game.RuleSet","title":"<code>RuleSet</code>","text":"<p>RuleSet class to store the rules of the game.</p> <p>Attributes:</p> Name Type Description <code>rules</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary where keys are choices and values are dictionaries of choices they can defeat with reasons.</p> <p>Example:     {         \"Rock\": {\"Scissors\": \"crushes\"},         \"Scissors\": {\"Paper\": \"cuts\"},         \"Paper\": {\"Rock\": \"covers\"},     }</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>class RuleSet:\n    \"\"\"RuleSet class to store the rules of the game.\n\n    Attributes:\n        rules (dict[str, dict[str, str]]): Dictionary where keys are choices and values are\n            dictionaries of choices they can defeat with reasons.\n\n            Example:\n                {\n                    \"Rock\": {\"Scissors\": \"crushes\"},\n                    \"Scissors\": {\"Paper\": \"cuts\"},\n                    \"Paper\": {\"Rock\": \"covers\"},\n                }\n    \"\"\"\n\n    def __init__(self, rules: dict[str, dict[str, str]]):\n        \"\"\"Initializes the RuleSet with the given rules.\n\n        Args:\n            rules (dict[str, dict[str, str]]): The rules of the game.\n        \"\"\"\n        self.rules = rules\n\n    def get_choices(self) -&gt; list[str]:\n        \"\"\"Gets the list of possible choices.\n\n        Returns:\n            list[str]: List of choices.\n        \"\"\"\n        return list(self.rules.keys())\n\n    def determine_winner(\n        self, choice_a: str, choice_b: str\n    ) -&gt; Optional[tuple[str, str]]:\n        \"\"\"Determines the winner between two choices.\n\n        Args:\n            choice_a (str): First choice.\n            choice_b (str): Second choice.\n\n        Returns:\n            Optional[tuple[str, str]]: Tuple containing the winning choice and the reason,\n                or None if it's a draw.\n\n        Example:\n            &gt;&gt;&gt; rules = RuleSet(BASIC_RULES)\n            &gt;&gt;&gt; rules.determine_winner(\"Rock\", \"Scissors\")\n                (\"Rock\", \"crushes\")\n            &gt;&gt;&gt; rules.determine_winner(\"Scissors\", \"Paper\")\n                (\"Scissors\", \"cuts\")\n        \"\"\"\n        if choice_a == choice_b:\n            return None\n        if choice_a in self.rules[choice_b]:\n            return choice_b, self.rules[choice_b][choice_a]\n        return choice_a, self.rules[choice_a][choice_b]\n</code></pre>"},{"location":"api/#rps_games.game.RuleSet.__init__","title":"<code>__init__(rules)</code>","text":"<p>Initializes the RuleSet with the given rules.</p> <p>Parameters:</p> Name Type Description Default <code>rules</code> <code>dict[str, dict[str, str]]</code> <p>The rules of the game.</p> required Source code in <code>src\\rps_games\\game.py</code> <pre><code>def __init__(self, rules: dict[str, dict[str, str]]):\n    \"\"\"Initializes the RuleSet with the given rules.\n\n    Args:\n        rules (dict[str, dict[str, str]]): The rules of the game.\n    \"\"\"\n    self.rules = rules\n</code></pre>"},{"location":"api/#rps_games.game.RuleSet.determine_winner","title":"<code>determine_winner(choice_a, choice_b)</code>","text":"<p>Determines the winner between two choices.</p> <p>Parameters:</p> Name Type Description Default <code>choice_a</code> <code>str</code> <p>First choice.</p> required <code>choice_b</code> <code>str</code> <p>Second choice.</p> required <p>Returns:</p> Type Description <code>Optional[tuple[str, str]]</code> <p>Optional[tuple[str, str]]: Tuple containing the winning choice and the reason, or None if it's a draw.</p> Example <p>rules = RuleSet(BASIC_RULES) rules.determine_winner(\"Rock\", \"Scissors\")     (\"Rock\", \"crushes\") rules.determine_winner(\"Scissors\", \"Paper\")     (\"Scissors\", \"cuts\")</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>def determine_winner(\n    self, choice_a: str, choice_b: str\n) -&gt; Optional[tuple[str, str]]:\n    \"\"\"Determines the winner between two choices.\n\n    Args:\n        choice_a (str): First choice.\n        choice_b (str): Second choice.\n\n    Returns:\n        Optional[tuple[str, str]]: Tuple containing the winning choice and the reason,\n            or None if it's a draw.\n\n    Example:\n        &gt;&gt;&gt; rules = RuleSet(BASIC_RULES)\n        &gt;&gt;&gt; rules.determine_winner(\"Rock\", \"Scissors\")\n            (\"Rock\", \"crushes\")\n        &gt;&gt;&gt; rules.determine_winner(\"Scissors\", \"Paper\")\n            (\"Scissors\", \"cuts\")\n    \"\"\"\n    if choice_a == choice_b:\n        return None\n    if choice_a in self.rules[choice_b]:\n        return choice_b, self.rules[choice_b][choice_a]\n    return choice_a, self.rules[choice_a][choice_b]\n</code></pre>"},{"location":"api/#rps_games.game.RuleSet.get_choices","title":"<code>get_choices()</code>","text":"<p>Gets the list of possible choices.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of choices.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>def get_choices(self) -&gt; list[str]:\n    \"\"\"Gets the list of possible choices.\n\n    Returns:\n        list[str]: List of choices.\n    \"\"\"\n    return list(self.rules.keys())\n</code></pre>"},{"location":"api/#rps_games.game.validate_player","title":"<code>validate_player(player_config, rules)</code>","text":"<p>Validate the player configuration and return the player object.</p> <p>Parameters:</p> Name Type Description Default <code>player_config</code> <code>dict[str, str]</code> <p>Player configuration dictionary.</p> required <code>rules</code> <code>Optional[dict]</code> <p>Rules dictionary for the game. Required for LLMPlayer.</p> required <p>Returns:</p> Name Type Description <code>Player</code> <code>Player</code> <p>Player object based on the configuration.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the player type is invalid.</p> Source code in <code>src\\rps_games\\game.py</code> <pre><code>def validate_player(player_config: dict[str, str], rules: Optional[dict]) -&gt; Player:\n    \"\"\"Validate the player configuration and return the player object.\n\n    Args:\n        player_config (dict[str, str]): Player configuration dictionary.\n        rules (Optional[dict]): Rules dictionary for the game. Required for LLMPlayer.\n\n    Returns:\n        Player: Player object based on the configuration.\n\n    Raises:\n        ValueError: If the player type is invalid.\n    \"\"\"\n\n    if player_config[\"type\"] not in PLAYERS_TYPES:\n        raise ValueError(f\"Invalid player type for player one. Must be {PLAYERS_TYPES}\")\n\n    if player_config[\"type\"] == \"HumanPlayer\":\n        player = HumanPlayer(name=player_config[\"name\"])\n    elif player_config[\"type\"] == \"ComputerPlayer\":\n        player = ComputerPlayer(name=player_config[\"name\"])\n    elif player_config[\"type\"] == \"LLMPlayer\":\n        player = LLMPlayer(name=player_config[\"name\"], rules=rules)\n    else:\n        raise ValueError(f\"Invalid player type for player one. Must be {PLAYERS_TYPES}\")\n    return player\n</code></pre>"},{"location":"api/#rps_games.players","title":"<code>rps_games.players</code>","text":"<p>Players module.</p>"},{"location":"api/#rps_games.players.ComputerPlayer","title":"<code>ComputerPlayer</code>","text":"<p>               Bases: <code>Player</code></p> <p>Computer Player class.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the player.</p> <code>score</code> <code>int</code> <p>Score of the player.</p> <p>Methods:</p> Name Description <code>choice</code> <p>Gets the computer player's choice randomly.</p> <code>__str__</code> <p>String representation of the player.</p> Source code in <code>src\\rps_games\\players.py</code> <pre><code>class ComputerPlayer(Player):\n    \"\"\"Computer Player class.\n\n    Attributes:\n        name (str): Name of the player.\n        score (int): Score of the player.\n\n    Methods:\n        choice: Gets the computer player's choice randomly.\n        __str__: String representation of the player.\n    \"\"\"\n\n    def choice(self, choices: list[str], history: Optional[list] = None) -&gt; str:\n        \"\"\"Gets the computer player's choice randomly.\n\n        Args:\n            choices (list[str]): List of possible choices.\n            history (Optional[list]): List of previous choices made in the game.\n\n        Returns:\n            str: Chosen option.\n        \"\"\"\n        return random.choice(choices)\n</code></pre>"},{"location":"api/#rps_games.players.ComputerPlayer.choice","title":"<code>choice(choices, history=None)</code>","text":"<p>Gets the computer player's choice randomly.</p> <p>Parameters:</p> Name Type Description Default <code>choices</code> <code>list[str]</code> <p>List of possible choices.</p> required <code>history</code> <code>Optional[list]</code> <p>List of previous choices made in the game.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Chosen option.</p> Source code in <code>src\\rps_games\\players.py</code> <pre><code>def choice(self, choices: list[str], history: Optional[list] = None) -&gt; str:\n    \"\"\"Gets the computer player's choice randomly.\n\n    Args:\n        choices (list[str]): List of possible choices.\n        history (Optional[list]): List of previous choices made in the game.\n\n    Returns:\n        str: Chosen option.\n    \"\"\"\n    return random.choice(choices)\n</code></pre>"},{"location":"api/#rps_games.players.HumanPlayer","title":"<code>HumanPlayer</code>","text":"<p>               Bases: <code>Player</code></p> <p>Human Player class.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the player.</p> <code>score</code> <code>int</code> <p>Score of the player.</p> <p>Methods:</p> Name Description <code>choice</code> <p>Gets the human player's choice using a secure input method.</p> <code>__str__</code> <p>String representation of the player.</p> Source code in <code>src\\rps_games\\players.py</code> <pre><code>class HumanPlayer(Player):\n    \"\"\"Human Player class.\n\n    Attributes:\n        name (str): Name of the player.\n        score (int): Score of the player.\n\n    Methods:\n        choice: Gets the human player's choice using a secure input method.\n        __str__: String representation of the player.\n    \"\"\"\n\n    def choice(self, choices: list[str], history: Optional[list] = None) -&gt; str:\n        \"\"\"Gets the human player's choice using a secure input method. This avoids\n        that if two humans are playing, they know what the other player has chosen.\n\n        Args:\n            choices (list[str]): List of possible choices.\n            history (Optional[list]): List of previous choices made in the game.\n\n        Returns:\n            str: Chosen option.\n        \"\"\"\n        while True:\n            choice = getpass.getpass(\n                f\"{self.name}, enter your choice {choices} \" f\"(or 'q' to quit): \"\n            )\n            if choice.upper() == \"Q\":\n                sys.exit()\n            if choice in choices:\n                return choice\n            print(f\"Invalid choice. Please choose from {choices}.\")\n</code></pre>"},{"location":"api/#rps_games.players.HumanPlayer.choice","title":"<code>choice(choices, history=None)</code>","text":"<p>Gets the human player's choice using a secure input method. This avoids that if two humans are playing, they know what the other player has chosen.</p> <p>Parameters:</p> Name Type Description Default <code>choices</code> <code>list[str]</code> <p>List of possible choices.</p> required <code>history</code> <code>Optional[list]</code> <p>List of previous choices made in the game.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Chosen option.</p> Source code in <code>src\\rps_games\\players.py</code> <pre><code>def choice(self, choices: list[str], history: Optional[list] = None) -&gt; str:\n    \"\"\"Gets the human player's choice using a secure input method. This avoids\n    that if two humans are playing, they know what the other player has chosen.\n\n    Args:\n        choices (list[str]): List of possible choices.\n        history (Optional[list]): List of previous choices made in the game.\n\n    Returns:\n        str: Chosen option.\n    \"\"\"\n    while True:\n        choice = getpass.getpass(\n            f\"{self.name}, enter your choice {choices} \" f\"(or 'q' to quit): \"\n        )\n        if choice.upper() == \"Q\":\n            sys.exit()\n        if choice in choices:\n            return choice\n        print(f\"Invalid choice. Please choose from {choices}.\")\n</code></pre>"},{"location":"api/#rps_games.players.LLMPlayer","title":"<code>LLMPlayer</code>","text":"<p>               Bases: <code>Player</code></p> <p>LLM Player class.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the player.</p> <code>score</code> <code>int</code> <p>Score of the player.</p> <code>model</code> <code>ChatGoogleGenerativeAI</code> <p>Language model for generating choices.</p> <code>rules</code> <code>dict[str, dict[str, str]]</code> <p>Rules of the game.</p> <p>Methods:</p> Name Description <code>choice</code> <p>Gets the LLM player's choice based on a generated prompt.</p> <code>_generate_prompt</code> <p>Generates a prompt for the LLM with the current choices and game history.</p> <code>__str__</code> <p>String representation of the player.</p> Source code in <code>src\\rps_games\\players.py</code> <pre><code>class LLMPlayer(Player):\n    \"\"\"LLM Player class.\n\n    Attributes:\n        name (str): Name of the player.\n        score (int): Score of the player.\n        model (ChatGoogleGenerativeAI): Language model for generating choices.\n        rules (dict[str, dict[str, str]]): Rules of the game.\n\n    Methods:\n        choice: Gets the LLM player's choice based on a generated prompt.\n        _generate_prompt: Generates a prompt for the LLM with the current choices and game history.\n        __str__: String representation of the player.\n    \"\"\"\n\n    def __init__(self, name: str, rules: dict[str, dict[str, str]]):\n        \"\"\"Initializes the LLM player with a name, rules, and a language model.\n\n        Args:\n            name (str): Name of the player.\n            rules (dict[str, dict[str, str]]): Rules of the game.\n        \"\"\"\n        super().__init__(name)\n        self.model = ChatGoogleGenerativeAI(model=\"gemini-1.5-flash\")\n        self.rules = rules\n\n    def _generate_prompt(self, choices: list[str], history: list) -&gt; PromptTemplate:\n        \"\"\"Generates a prompt for the LLM with the current choices and game history.\n\n        Args:\n            choices (list[str]): List of possible choices.\n            history (list[str]): List of previous choices made in the game.\n\n        Returns:\n            str: Generated prompt.\n        \"\"\"\n        template = \"\"\"\n        You are playing Rock, Paper, Scissors or an extended version of it.\n\n        Here are your options:\n        {choices}\n\n        Here are the rules:\n        {rules}\n\n        Develop a strategy based on the game history. Game history between you\n        and your opponent (your name is {name}):\n        {history}\n\n        What is your next move? Answer providing only the choice (e.g., 'Rock').\n        \"\"\"\n        prompt = PromptTemplate(\n            input_variables=[\"choices\", \"history\"], template=template\n        )\n        choices_str = \"\\n\".join(f\"- {choice}\" for choice in choices)\n        history_str = \"\\n\".join(history)\n        rules_str = \"\\n\".join(\n            f\"{choice} {reason} {defeated_choice}\"\n            for choice in self.rules\n            for defeated_choice, reason in self.rules[choice].items()\n        )\n        return prompt.format(\n            choices=choices_str, history=history_str, rules=rules_str, name=self.name\n        )\n\n    def choice(self, choices: list[str], history: list) -&gt; str:\n        \"\"\"Gets the LLM player's choice based on a generated prompt.\n\n        Args:\n            choices (list[str]): List of possible choices.\n            history (list[str]): List of previous choices made in the game.\n\n        Returns:\n            str: Chosen option.\n        \"\"\"\n        prompt = self._generate_prompt(choices, history)\n        try:\n            res = self.model.invoke(prompt)\n        except ResourceExhausted:\n            print(\"LLM resource exhausted. Please try again.\")\n            sys.exit()\n        return res.content\n</code></pre>"},{"location":"api/#rps_games.players.LLMPlayer.__init__","title":"<code>__init__(name, rules)</code>","text":"<p>Initializes the LLM player with a name, rules, and a language model.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the player.</p> required <code>rules</code> <code>dict[str, dict[str, str]]</code> <p>Rules of the game.</p> required Source code in <code>src\\rps_games\\players.py</code> <pre><code>def __init__(self, name: str, rules: dict[str, dict[str, str]]):\n    \"\"\"Initializes the LLM player with a name, rules, and a language model.\n\n    Args:\n        name (str): Name of the player.\n        rules (dict[str, dict[str, str]]): Rules of the game.\n    \"\"\"\n    super().__init__(name)\n    self.model = ChatGoogleGenerativeAI(model=\"gemini-1.5-flash\")\n    self.rules = rules\n</code></pre>"},{"location":"api/#rps_games.players.LLMPlayer._generate_prompt","title":"<code>_generate_prompt(choices, history)</code>","text":"<p>Generates a prompt for the LLM with the current choices and game history.</p> <p>Parameters:</p> Name Type Description Default <code>choices</code> <code>list[str]</code> <p>List of possible choices.</p> required <code>history</code> <code>list[str]</code> <p>List of previous choices made in the game.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>PromptTemplate</code> <p>Generated prompt.</p> Source code in <code>src\\rps_games\\players.py</code> <pre><code>def _generate_prompt(self, choices: list[str], history: list) -&gt; PromptTemplate:\n    \"\"\"Generates a prompt for the LLM with the current choices and game history.\n\n    Args:\n        choices (list[str]): List of possible choices.\n        history (list[str]): List of previous choices made in the game.\n\n    Returns:\n        str: Generated prompt.\n    \"\"\"\n    template = \"\"\"\n    You are playing Rock, Paper, Scissors or an extended version of it.\n\n    Here are your options:\n    {choices}\n\n    Here are the rules:\n    {rules}\n\n    Develop a strategy based on the game history. Game history between you\n    and your opponent (your name is {name}):\n    {history}\n\n    What is your next move? Answer providing only the choice (e.g., 'Rock').\n    \"\"\"\n    prompt = PromptTemplate(\n        input_variables=[\"choices\", \"history\"], template=template\n    )\n    choices_str = \"\\n\".join(f\"- {choice}\" for choice in choices)\n    history_str = \"\\n\".join(history)\n    rules_str = \"\\n\".join(\n        f\"{choice} {reason} {defeated_choice}\"\n        for choice in self.rules\n        for defeated_choice, reason in self.rules[choice].items()\n    )\n    return prompt.format(\n        choices=choices_str, history=history_str, rules=rules_str, name=self.name\n    )\n</code></pre>"},{"location":"api/#rps_games.players.LLMPlayer.choice","title":"<code>choice(choices, history)</code>","text":"<p>Gets the LLM player's choice based on a generated prompt.</p> <p>Parameters:</p> Name Type Description Default <code>choices</code> <code>list[str]</code> <p>List of possible choices.</p> required <code>history</code> <code>list[str]</code> <p>List of previous choices made in the game.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Chosen option.</p> Source code in <code>src\\rps_games\\players.py</code> <pre><code>def choice(self, choices: list[str], history: list) -&gt; str:\n    \"\"\"Gets the LLM player's choice based on a generated prompt.\n\n    Args:\n        choices (list[str]): List of possible choices.\n        history (list[str]): List of previous choices made in the game.\n\n    Returns:\n        str: Chosen option.\n    \"\"\"\n    prompt = self._generate_prompt(choices, history)\n    try:\n        res = self.model.invoke(prompt)\n    except ResourceExhausted:\n        print(\"LLM resource exhausted. Please try again.\")\n        sys.exit()\n    return res.content\n</code></pre>"},{"location":"api/#rps_games.players.Player","title":"<code>Player</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract Player class.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the player.</p> <code>score</code> <code>int</code> <p>Score of the player.</p> <p>Methods:</p> Name Description <code>choice</code> <p>Abstract method to get the player's choice.</p> <code>__str__</code> <p>String representation of the player.</p> Source code in <code>src\\rps_games\\players.py</code> <pre><code>class Player(ABC):\n    \"\"\"Abstract Player class.\n\n    Attributes:\n        name (str): Name of the player.\n        score (int): Score of the player.\n\n    Methods:\n        choice: Abstract method to get the player's choice.\n        __str__: String representation of the player.\n    \"\"\"\n\n    def __init__(self, name: str):\n        \"\"\"Initializes the player with a name and a score of 0.\n\n        Args:\n            name (str): Name of the player.\n        \"\"\"\n        self.name = name\n        self.score = 0\n\n    @abstractmethod\n    def choice(self, choices: list[str], history: Optional[list] = None) -&gt; str:\n        \"\"\"Abstract method to get the player's choice.\n\n        Args:\n            choices (list[str]): List of possible choices.\n            history (Optional[list]): List of previous choices made in the game.\n\n        Returns:\n            str: Chosen option.\n        \"\"\"\n\n    def __str__(self) -&gt; str:\n        \"\"\"String representation of the player.\n\n        Returns:\n            str: Name of the player.\n        \"\"\"\n        return self.name\n</code></pre>"},{"location":"api/#rps_games.players.Player.__init__","title":"<code>__init__(name)</code>","text":"<p>Initializes the player with a name and a score of 0.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the player.</p> required Source code in <code>src\\rps_games\\players.py</code> <pre><code>def __init__(self, name: str):\n    \"\"\"Initializes the player with a name and a score of 0.\n\n    Args:\n        name (str): Name of the player.\n    \"\"\"\n    self.name = name\n    self.score = 0\n</code></pre>"},{"location":"api/#rps_games.players.Player.__str__","title":"<code>__str__()</code>","text":"<p>String representation of the player.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Name of the player.</p> Source code in <code>src\\rps_games\\players.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"String representation of the player.\n\n    Returns:\n        str: Name of the player.\n    \"\"\"\n    return self.name\n</code></pre>"},{"location":"api/#rps_games.players.Player.choice","title":"<code>choice(choices, history=None)</code>  <code>abstractmethod</code>","text":"<p>Abstract method to get the player's choice.</p> <p>Parameters:</p> Name Type Description Default <code>choices</code> <code>list[str]</code> <p>List of possible choices.</p> required <code>history</code> <code>Optional[list]</code> <p>List of previous choices made in the game.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Chosen option.</p> Source code in <code>src\\rps_games\\players.py</code> <pre><code>@abstractmethod\ndef choice(self, choices: list[str], history: Optional[list] = None) -&gt; str:\n    \"\"\"Abstract method to get the player's choice.\n\n    Args:\n        choices (list[str]): List of possible choices.\n        history (Optional[list]): List of previous choices made in the game.\n\n    Returns:\n        str: Chosen option.\n    \"\"\"\n</code></pre>"},{"location":"diagrams/","title":"Diagrams","text":""},{"location":"diagrams/#class-diagram","title":"Class Diagram","text":""},{"location":"diagrams/#sequence-diagram","title":"Sequence Diagram","text":""}]}